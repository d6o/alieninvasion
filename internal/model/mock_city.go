// Code generated by MockGen. DO NOT EDIT.
// Source: city.go

// Package model is a generated GoMock package.
package model

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCityRepository is a mock of CityRepository interface.
type MockCityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCityRepositoryMockRecorder
}

// MockCityRepositoryMockRecorder is the mock recorder for MockCityRepository.
type MockCityRepositoryMockRecorder struct {
	mock *MockCityRepository
}

// NewMockCityRepository creates a new mock instance.
func NewMockCityRepository(ctrl *gomock.Controller) *MockCityRepository {
	mock := &MockCityRepository{ctrl: ctrl}
	mock.recorder = &MockCityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCityRepository) EXPECT() *MockCityRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockCityRepository) All() map[string]*City {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].(map[string]*City)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockCityRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockCityRepository)(nil).All))
}

// AllNames mocks base method.
func (m *MockCityRepository) AllNames() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// AllNames indicates an expected call of AllNames.
func (mr *MockCityRepositoryMockRecorder) AllNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllNames", reflect.TypeOf((*MockCityRepository)(nil).AllNames))
}

// Get mocks base method.
func (m *MockCityRepository) Get(name string) (*City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(*City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCityRepositoryMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCityRepository)(nil).Get), name)
}

// GetOrAdd mocks base method.
func (m *MockCityRepository) GetOrAdd(name string) (*City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrAdd", name)
	ret0, _ := ret[0].(*City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrAdd indicates an expected call of GetOrAdd.
func (mr *MockCityRepositoryMockRecorder) GetOrAdd(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrAdd", reflect.TypeOf((*MockCityRepository)(nil).GetOrAdd), name)
}

// Remove mocks base method.
func (m *MockCityRepository) Remove(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", name)
}

// Remove indicates an expected call of Remove.
func (mr *MockCityRepositoryMockRecorder) Remove(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockCityRepository)(nil).Remove), name)
}
